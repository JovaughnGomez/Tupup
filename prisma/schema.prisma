// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id String @id @default(uuid())
  username String @unique
  email String @unique
  number String?
  password String
  wallet Decimal @default(0)
  credits Decimal @default(0)
  country String @default("Trinidad and Tobago")
  city String?
  isAdmin Boolean @default(false)
  isActive Boolean @default(true)
  joined DateTime @default(now())
  eula DateTime @default(now())
  subscribe Boolean @default(false)
  cart Cart[]
  order Order[]
  transaction Transaction[]
}

model Order {
  id String @id
  paymentId String
  productId String  
  status String // Ongoing, Completed, Refunded, Cancelled
  paymentMethod String
  dateCreated DateTime @default(now())
  dateCompleted DateTime?
  userId String
  product Product @relation(fields: [productId], references: [id])
  user User @relation(fields: [userId], references: [id])
}

model Transaction {
  id String @id @default(uuid())
  method String // phonecard, offline_banking, online_banking
  value Decimal @default(0)
  status String @default("waiting") // waiting, expired, completed
  notes Json?
  adminNotes Json?
  dateCreated DateTime @default(now())
  dateCompleted DateTime?
  userId String 
  balanceBefore Decimal @default(0)
  balanceAfter Decimal @default(0)
  user User @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([status])
}

model Cart {
  userId String @id @unique
  user User @relation(fields: [userId], references: [id])
  productId String  
  product Product @relation(fields: [productId], references: [id])
}

model ProductCategory {
  id String @id @default(uuid())
  name String @unique
  displayName String
  icon String
  region String?
  onSale Boolean @default(false)
  allowMultiple Boolean @default(true)
  notes String?
  description String @db.Text
  guide String? @db.Text
  tags Json?
  products Product[]
  isActive Boolean @default(true)

  @@index([name])
}

model Product {
  id String @id @default(uuid())
  name String
  icon String
  categoryId String
  usdValue Decimal @default(0)
  price Decimal
  salePrice Decimal
  isActive Boolean @default(false)
  createdAt DateTime @default(now())
  order Order[]
  carts Cart[]
  productCategory ProductCategory @relation(fields: [categoryId], references: [id])
}

model GiftCard {
  id String @id
}